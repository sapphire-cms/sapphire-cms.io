import {Docs} from "../../docs.types";

export const coreConcepts_default: Docs = {
  "title": "Core Concepts",
  "precedent": "docs/getting-started/introduction",
  "next": "docs/getting-started/installation",
  "content": "Sapphire CMS is built around a **tiny, environment-agnostic, embeddable core**. This core manages the entire content flow but is completely unaware of the runtime it operates in.\n\nTo make it function in a specific environment — whether it's a local Node.js process, a serverless function, or even the browser — and to provide features not handled by the core (like caching or authentication), Sapphire relies on **pluggable layers**.\n\nUnless the CMS is bundled using the `@sapphire-cms/aot` compiler, these layers are **discovered and lazy-loaded** at runtime during startup.\n\n### Modules\n\nRelated layers are grouped into modules. For example:\n\n- `@sapphire-cms/aws` and `@sapphire-cms/firebase` provide integrations with their respective cloud platforms.\n- `@sapphire-cms/github` enables persistence and publishing of content via GitHub.\n- `@sapphire-cms/auth0` offers authentication for admins and content managers via the Okta Auth0 Identity Provider.\n\nWhen building your CMS with Sapphire, you are **free to choose your modules and compose your layers**.\n\nYou can run Sapphire on **AWS Lambda**, manage content through a **REST API**, and deliver it through a **CDN**.\n\nOr, you can stay entirely **local**, managing content from the terminal and generating objects directly into your app repo.\n\nYou can even go **fully edge-native**, running the CMS in the browser and persisting both content and rendered output into an edge database.\n\nWith Sapphire, you have the freedom to build your **content delivery pipeline exactly how you want**.\n\nLet’s now take a closer look at the layers that make up Sapphire CMS and what each of them is responsible for.\n\n### Base Layers\n\nBase layers are the essential components required for Sapphire CMS to boot and run.\nWhile not all of them are mandatory, base layers are always singletons.\n\nHere is the list of base layers and their respective roles:\n\n| Layer       | Mandatory | Role                                                                     |\n|-------------|-----------|--------------------------------------------------------------------------|\n| bootstrap   | yes       | Handles the initial startup process of the CMS.                          |\n| platform    | yes       | Integrates the CMS with its environment (local or cloud).                |\n| admin       | yes       | Provides the admin interface for CMS configuration.                      |\n| management  | yes       | Provides the interface for managing content.                             |\n| persistence | yes       | Manages storage and retrieval of documents.                              |\n| public      | no        | Exposes APIs to serve rendered content publicly.                         |\n| cache       | no        | Provides caching capabilities for the persistence layer.                 |\n| migration   | no        | Handles migrations between different persistence stores.                 |\n| media       | yes       | Manages media assets like images, videos, and audio files.               |\n| security    | no        | Provides authentication and authorization for Admin and Management APIs. |\n\n### Pluggable Layers\n\nPluggable layers provide ad-hoc capabilities to the CMS.\n\nA Sapphire instance can have multiple implementations of these layers, depending on the environment or project needs.\n\nPluggable layers are mainly used by the rendering pipelines to transform and deliver content.\n\nHere is the list of pluggable layers and their respective roles:\n\n| Layer    | Role                                                                                             |\n|----------|--------------------------------------------------------------------------------------------------|\n| content  | Provides field types and validators.                                                             |\n| shaper   | Transforms content to adapt it for different channels or platforms.                              |\n| render   | Converts documents into deliverable artifacts such as HTML, Markdown, or JSON.                   |\n| delivery | Delivers artifacts to end users or storage platforms like CDNs, GitHub Pages, or Edge Databases. |"
};
