import {Docs} from "../../docs.types";

export const contentSchemas_default: Docs = {
  "title": "Content Schemas",
  "content": "Content schemas are the central part of Sapphire CMS.\n\nUsing schemas, you define and structure your content. Schemas describe the **shape** of documents and control the fields they contain.\n\nSchemas are written in `YAML` files, where each file lists the fields and structure for a specific document type.\n\nIf you are running Sapphire on Node, content schemas are, by default, stored in `./sapphire-cms-data/schemas`. For example:\n\n```\nMy-Project\n├── sapphire-cms-data\n    ├── schemas\n        ├── docs.yaml\n        ├── layout.yml\n        ├── sponsor-tier.yaml\n```\n\nHere’s an example of a content schema file:\n\n```yaml\n# ./sapphire-cms-data/schemas/sponsor-tier.yaml\n\nname: sponsor-tier\nlabel: Sponsor Tiers\ndescription: Collection of available sponsor tiers\ntype: collection\nfields:\n  - name: tier\n    label: Tier Name\n    description: A catchy name for the sponsor tier.\n    type: text\n    required: true\n\n  - name: img\n    label: Tier Image\n    example: assets/tiers/amethyst.svg\n    type: text\n    required: true\n\n  - name: available\n    label: Is Tier Available\n    type: check\n    required: true\n\n  - name: category\n    label: Sponsor Tier Category\n    type:\n      name: tag\n      params:\n        values:\n          - sponsor\n          - partner\n          - founding partner\n\n  - name: donation\n    label: Donation Amount\n    description: Required donation amount in USD.\n    type: number\n    required: true\n\n  - name: for-whom\n    label: Preferred Targets\n    type: text\n    is-list: true\n\n  - name: description\n    label: Tier Description\n    type: rich-text\n    required: true\n```\n\nContent schemas are straightforward:\n\nThey start with the schema name, a human-readable label, and an optional description, followed by the **type of content**.\n\nSapphire CMS defines three types of content:\n\n| Content Type | Description                                                                                                                            |\n|--------------|----------------------------------------------------------------------------------------------------------------------------------------|\n| singleton    | Defines a single piece of content that must exist only once in the CMS, like Terms of Service or Privacy Policy.                       |\n| collection   | A flat list (ordered set) of documents of the same type, such as blog posts or product listings.                                       |\n| tree         | A deeply nested structure of documents organized by paths and folders, commonly used for documentation or complex content hierarchies. |\n\n## Fields\n\nThe `fields` section defines the entries of the documents shaped by the content schema.\n\nHere is the list of **field properties** and their roles:\n\n| Field Property | Mandatory | Role                                                                                        |\n|----------------|-----------|---------------------------------------------------------------------------------------------|\n| name           | yes       | The internal name of the field. Must be unique within the schema.                           |                                                                                \n| label          | no        | A human-readable label for the field, used in management UIs.                               |                                                                  \n| description    | no        | A detailed description of the field's purpose.                                              |         \n| example        | no        | An example value to guide content editors.                                                  |   \n| type           | yes       | The type of data this field holds.                                                          |   \n| is-list        | no        | Boolean flag indicating whether the field can contain multiple values. Defaults to `false`. |   \n| required       | no        | Boolean flag indicating whether a value for this field is mandatory. Defaults to `false`.   |  \n| validation     | no        | A list of additional validation rules applied to the field value.                           |  "
};
