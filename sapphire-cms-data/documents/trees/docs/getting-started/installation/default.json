{"id":"installation","store":"docs","path":["getting-started"],"type":"tree","variant":"default","status":"PUBLISHED","createdAt":"2025-04-30T12:48:18.163Z","lastModifiedAt":"2025-08-08T20:51:39.094Z","createdBy":"node@0.0.0","content":{"title":"Installation","precedent":"docs/getting-started/core-concepts","next":"docs/usage/cms-config:default","content":"Sapphire CMS is written in TypeScript. While it’s a low-code, low-configuration CMS, you don’t need to know TypeScript to use it.\nSapphire integrates seamlessly with any stack for web or mobile applications — whether that’s Python, Ruby, PHP, JavaScript, Kotlin, or others.\n\nAt runtime, all Sapphire needs is a JavaScript environment, which is provided by virtually every modern cloud platform.\n\nFor CMS development, all you need is Node.js (any recent LTS version).\n\n> **Note**: Node is required only for development. At runtime, the CMS can run in any JavaScript environment — Node, Bun, Deno, or even the browser.\n\n## CLI\n\nUsing the Sapphire CLI is the most straightforward way to create your CMS. Install it with:\n\n```shell\nnpm install -g @sapphire-cms/cli@latest\n```\n\nCheck that the CLI was installed successfully by running:\n\n```shell\nscms -V\n```\n\n## Starting a CMS project\n\nThere are two ways to start your CMS project:\n\n- Create a new standalone Sapphire project\n- Add Sapphire to an existing Node project\n\n### Creating a new project from scratch\n\nThis approach is recommended if you want to keep your CMS configuration separate, or if your main project doesn’t use Node.\n\nTo initialize a new project, simply run:\n\n```shell\nscms create\n```\n\nThe CLI will guide you through the setup, asking a few questions, and then create a new folder with all the basic CMS settings.\n\n### Adding CMS to an existing Node project\n\nIf you already have a JavaScript project, you can add Sapphire CMS directly into the same repository.\n\nFor small applications and websites, this is a solid solution — allowing you to keep your application code and CMS configuration in one place.\nYou can also add it as a package in a multi-module repository.\n\nTo plug Sapphire into an existing project, run:\n\n```shell\nscms init\n```\n\nThis will prompt you with the same questions as `scms create` and scaffold all necessary files in your current folder.\n\n### Installing packages\n\nThe power of Sapphire’s modular design comes from its pluggable **modules**, which can be added as needed.\n\nIn the Sapphire ecosystem, modules are distributed as **packages** (just regular npm packages).\n\nThe CLI makes managing these packages easy, handling versions for you. The base command is:\n\n```shell\nscms package\n```\n\nFor example, to install the `github` module to persist CMS data in a GitHub repository:\n\n```shell\nscms package install github\n```"}}